
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'file_input_endleftPLUSMINUSleftTIMESDIVIDErightUMINUSINVERTVAR INT FLOAT EQUALS PLUS MINUS TIMES DIVIDE LPAREN RPAREN INVERT DOT FXN RBRACE LBRACE LBRACKET RBRACKET COMMA AND OR IS IF ELIF ELSE IMPORT IMPNAME NEWLINE RETURN STRING TRUE FALSE POWER COMPLEX DEL ASstmt : IMPORT IMPNAME\n            | IMPORT IMPNAME AS VARstmt : IMPORT VAR\n            | IMPORT VAR AS VARstmt : VAR EQUALS expressioncsa : VAR\n           | csa COMMA VAR\n    fargs : LPAREN csa RPAREN\n             | LPAREN csa COMMA RPAREN\n             | LPAREN RPAREN\n    stmts : stmt\n             | stmts NEWLINE stmt\n             | stmts NEWLINEstmt : RETURN expressionstmt : if_stmt\n            | funcdefstmt : expressionif_stmt : IF expression bodybody : LBRACE stmts RBRACEbody : LBRACE RBRACEcsv : expression\n           | csv COMMA expression\n    tuple : LPAREN csv RPAREN\n             | LPAREN csv COMMA RPAREN\n             | LPAREN RPAREN\n    expression : expression tuplefuncdef : FXN VAR fargs bodyexpression : expression DOT VARexpression : STRING\n                  | INT\n                  | FLOAT\n                  | COMPLEX\n    expression : VARexpression : tupleexpression : LBRACE csv RBRACE\n                    | LBRACE csv COMMA RBRACE\n                    | LBRACE RBRACE\n    expression : LBRACKET csv RBRACKET\n                  | LBRACKET csv COMMA RBRACKET\n                  | LBRACKET RBRACKET\n    expression : expression PLUS expression\n              | expression MINUS expression\n              | expression TIMES expression\n              | expression DIVIDE expression\n              | expression POWER expressionexpression : MINUS expression %prec UMINUS\n                  |  INVERT expressionexpression : LPAREN expression RPARENexpression : TRUEexpression : FALSEfile_input_end : file_inputfile_input : file_input NEWLINE\n                  | file_input stmt\n                  | NEWLINE\n                  | stmt'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,6,7,9,10,13,14,15,16,17,23,24,25,26,27,28,30,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,65,67,69,70,72,73,74,75,76,77,81,83,84,85,86,89,],[3,25,-54,-55,-33,-17,-15,-16,-34,-29,-30,-31,-32,-49,-50,-52,-53,-1,-3,-26,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,-35,-38,-48,-23,-2,-4,86,-20,-11,-27,-36,-39,-24,-19,-13,-12,]),'IMPORT':([0,2,3,4,6,7,9,10,13,14,15,16,17,23,24,25,26,27,28,30,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,67,69,70,72,73,75,77,81,83,84,85,86,],[5,5,-54,-55,-33,-17,-15,-16,-34,-29,-30,-31,-32,-49,-50,-52,-53,-1,-3,-26,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,5,-35,-38,-48,-23,-2,-4,-20,-27,-36,-39,-24,-19,5,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,46,47,48,50,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,88,],[6,6,-54,-55,28,-33,-17,39,-15,-16,39,41,-34,-29,-30,-31,-32,39,39,39,39,39,-49,-50,-52,-53,-1,-3,39,-26,55,39,39,39,39,39,39,-14,-33,-37,-40,-46,-47,-25,72,73,-5,-28,-41,-42,-43,-44,-45,-18,6,80,-35,39,-38,39,-48,-23,39,-2,-4,-20,-27,-36,-39,-24,-19,6,91,]),'RETURN':([0,2,3,4,6,7,9,10,13,14,15,16,17,23,24,25,26,27,28,30,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,67,69,70,72,73,75,77,81,83,84,85,86,],[8,8,-54,-55,-33,-17,-15,-16,-34,-29,-30,-31,-32,-49,-50,-52,-53,-1,-3,-26,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,8,-35,-38,-48,-23,-2,-4,-20,-27,-36,-39,-24,-19,8,]),'IF':([0,2,3,4,6,7,9,10,13,14,15,16,17,23,24,25,26,27,28,30,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,67,69,70,72,73,75,77,81,83,84,85,86,],[11,11,-54,-55,-33,-17,-15,-16,-34,-29,-30,-31,-32,-49,-50,-52,-53,-1,-3,-26,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,11,-35,-38,-48,-23,-2,-4,-20,-27,-36,-39,-24,-19,11,]),'FXN':([0,2,3,4,6,7,9,10,13,14,15,16,17,23,24,25,26,27,28,30,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,67,69,70,72,73,75,77,81,83,84,85,86,],[12,12,-54,-55,-33,-17,-15,-16,-34,-29,-30,-31,-32,-49,-50,-52,-53,-1,-3,-26,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,12,-35,-38,-48,-23,-2,-4,-20,-27,-36,-39,-24,-19,12,]),'STRING':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,],[14,14,-54,-55,-33,-17,14,-15,-16,14,-34,-29,-30,-31,-32,14,14,14,14,14,-49,-50,-52,-53,-1,-3,14,-26,14,14,14,14,14,14,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,14,-35,14,-38,14,-48,-23,14,-2,-4,-20,-27,-36,-39,-24,-19,14,]),'INT':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,],[15,15,-54,-55,-33,-17,15,-15,-16,15,-34,-29,-30,-31,-32,15,15,15,15,15,-49,-50,-52,-53,-1,-3,15,-26,15,15,15,15,15,15,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,15,-35,15,-38,15,-48,-23,15,-2,-4,-20,-27,-36,-39,-24,-19,15,]),'FLOAT':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,],[16,16,-54,-55,-33,-17,16,-15,-16,16,-34,-29,-30,-31,-32,16,16,16,16,16,-49,-50,-52,-53,-1,-3,16,-26,16,16,16,16,16,16,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,16,-35,16,-38,16,-48,-23,16,-2,-4,-20,-27,-36,-39,-24,-19,16,]),'COMPLEX':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,],[17,17,-54,-55,-33,-17,17,-15,-16,17,-34,-29,-30,-31,-32,17,17,17,17,17,-49,-50,-52,-53,-1,-3,17,-26,17,17,17,17,17,17,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,17,-35,17,-38,17,-48,-23,17,-2,-4,-20,-27,-36,-39,-24,-19,17,]),'LBRACE':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,43,46,47,48,50,54,55,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,73,75,77,79,81,83,84,85,86,87,90,],[18,18,-54,-55,-33,-17,18,-15,-16,18,-34,-29,-30,-31,-32,18,18,18,18,18,-49,-50,-52,-53,-1,-3,18,-26,18,18,18,18,18,18,-14,-33,62,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,18,62,-35,18,-38,18,-48,-23,18,-2,-4,-20,-27,-10,-36,-39,-24,-19,18,-8,-9,]),'LBRACKET':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,],[19,19,-54,-55,-33,-17,19,-15,-16,19,-34,-29,-30,-31,-32,19,19,19,19,19,-49,-50,-52,-53,-1,-3,19,-26,19,19,19,19,19,19,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,19,-35,19,-38,19,-48,-23,19,-2,-4,-20,-27,-36,-39,-24,-19,19,]),'MINUS':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,43,44,46,47,48,49,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,82,83,84,85,86,],[20,20,-54,-55,-33,33,20,-15,-16,20,-34,-29,-30,-31,-32,20,20,20,20,20,-49,-50,-52,-53,-1,-3,20,-26,20,20,20,20,20,20,33,-33,33,-37,33,-40,-46,-47,33,-25,33,-28,-41,-42,-43,-44,33,-18,20,-35,20,-38,20,-48,-23,20,-2,-4,-20,-27,-36,33,-39,-24,-19,20,]),'INVERT':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,],[21,21,-54,-55,-33,-17,21,-15,-16,21,-34,-29,-30,-31,-32,21,21,21,21,21,-49,-50,-52,-53,-1,-3,21,-26,21,21,21,21,21,21,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,21,-35,21,-38,21,-48,-23,21,-2,-4,-20,-27,-36,-39,-24,-19,21,]),'LPAREN':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,43,44,46,47,48,49,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,82,83,84,85,86,],[22,22,-54,-55,-33,37,22,-15,-16,22,-34,-29,-30,-31,-32,22,22,22,22,22,-49,-50,-52,-53,-1,-3,22,-26,22,22,22,22,22,22,37,-33,37,64,-37,37,-40,-46,-47,37,-25,37,-28,-41,-42,-43,-44,37,-18,22,-35,22,-38,22,-48,-23,22,-2,-4,-20,-27,-36,37,-39,-24,-19,22,]),'TRUE':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,],[23,23,-54,-55,-33,-17,23,-15,-16,23,-34,-29,-30,-31,-32,23,23,23,23,23,-49,-50,-52,-53,-1,-3,23,-26,23,23,23,23,23,23,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,23,-35,23,-38,23,-48,-23,23,-2,-4,-20,-27,-36,-39,-24,-19,23,]),'FALSE':([0,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,77,81,83,84,85,86,],[24,24,-54,-55,-33,-17,24,-15,-16,24,-34,-29,-30,-31,-32,24,24,24,24,24,-49,-50,-52,-53,-1,-3,24,-26,24,24,24,24,24,24,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,24,-35,24,-38,24,-48,-23,24,-2,-4,-20,-27,-36,-39,-24,-19,24,]),'$end':([1,2,3,4,6,7,9,10,13,14,15,16,17,23,24,25,26,27,28,30,38,39,43,46,47,48,50,54,55,56,57,58,59,60,61,65,67,69,70,72,73,75,77,81,83,84,85,],[0,-51,-54,-55,-33,-17,-15,-16,-34,-29,-30,-31,-32,-49,-50,-52,-53,-1,-3,-26,-14,-33,-37,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,-35,-38,-48,-23,-2,-4,-20,-27,-36,-39,-24,-19,]),'IMPNAME':([5,],[27,]),'EQUALS':([6,],[29,]),'DOT':([6,7,13,14,15,16,17,23,24,30,38,39,40,43,44,46,47,48,49,50,54,55,56,57,58,59,60,65,67,69,70,81,82,83,84,],[-33,31,-34,-29,-30,-31,-32,-49,-50,-26,31,-33,31,-37,31,-40,-46,-47,31,-25,31,-28,-41,-42,-43,-44,31,-35,-38,-48,-23,-36,31,-39,-24,]),'PLUS':([6,7,13,14,15,16,17,23,24,30,38,39,40,43,44,46,47,48,49,50,54,55,56,57,58,59,60,65,67,69,70,81,82,83,84,],[-33,32,-34,-29,-30,-31,-32,-49,-50,-26,32,-33,32,-37,32,-40,-46,-47,32,-25,32,-28,-41,-42,-43,-44,32,-35,-38,-48,-23,-36,32,-39,-24,]),'TIMES':([6,7,13,14,15,16,17,23,24,30,38,39,40,43,44,46,47,48,49,50,54,55,56,57,58,59,60,65,67,69,70,81,82,83,84,],[-33,34,-34,-29,-30,-31,-32,-49,-50,-26,34,-33,34,-37,34,-40,-46,-47,34,-25,34,-28,34,34,-43,-44,34,-35,-38,-48,-23,-36,34,-39,-24,]),'DIVIDE':([6,7,13,14,15,16,17,23,24,30,38,39,40,43,44,46,47,48,49,50,54,55,56,57,58,59,60,65,67,69,70,81,82,83,84,],[-33,35,-34,-29,-30,-31,-32,-49,-50,-26,35,-33,35,-37,35,-40,-46,-47,35,-25,35,-28,35,35,-43,-44,35,-35,-38,-48,-23,-36,35,-39,-24,]),'POWER':([6,7,13,14,15,16,17,23,24,30,38,39,40,43,44,46,47,48,49,50,54,55,56,57,58,59,60,65,67,69,70,81,82,83,84,],[-33,36,-34,-29,-30,-31,-32,-49,-50,-26,36,-33,36,-37,36,-40,-46,-47,36,-25,36,-28,-41,-42,-43,-44,36,-35,-38,-48,-23,-36,36,-39,-24,]),'RBRACE':([6,7,9,10,13,14,15,16,17,18,23,24,27,28,30,38,39,42,43,44,46,47,48,50,54,55,56,57,58,59,60,61,62,65,66,67,69,70,72,73,74,75,76,77,81,82,83,84,85,86,89,],[-33,-17,-15,-16,-34,-29,-30,-31,-32,43,-49,-50,-1,-3,-26,-14,-33,65,-37,-21,-40,-46,-47,-25,-5,-28,-41,-42,-43,-44,-45,-18,75,-35,81,-38,-48,-23,-2,-4,85,-20,-11,-27,-36,-22,-39,-24,-19,-13,-12,]),'COMMA':([13,14,15,16,17,23,24,30,39,42,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,65,67,69,70,78,80,81,82,83,84,91,],[-34,-29,-30,-31,-32,-49,-50,-26,-33,66,-37,-21,68,-40,-46,-47,-21,-25,71,-28,-41,-42,-43,-44,-45,-35,-38,-48,-23,88,-6,-36,-22,-39,-24,-7,]),'RBRACKET':([13,14,15,16,17,19,23,24,30,39,43,44,45,46,47,48,50,55,56,57,58,59,60,65,67,68,69,70,81,82,83,84,],[-34,-29,-30,-31,-32,46,-49,-50,-26,-33,-37,-21,67,-40,-46,-47,-25,-28,-41,-42,-43,-44,-45,-35,-38,83,-48,-23,-36,-22,-39,-24,]),'RPAREN':([13,14,15,16,17,22,23,24,30,37,39,43,44,46,47,48,49,50,51,55,56,57,58,59,60,64,65,67,69,70,71,78,80,81,82,83,84,88,91,],[-34,-29,-30,-31,-32,50,-49,-50,-26,50,-33,-37,-21,-40,-46,-47,69,-25,70,-28,-41,-42,-43,-44,-45,79,-35,-38,-48,-23,84,87,-6,-36,-22,-39,-24,90,-7,]),'AS':([27,28,],[52,53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file_input_end':([0,],[1,]),'file_input':([0,],[2,]),'stmt':([0,2,62,86,],[4,26,76,89,]),'expression':([0,2,8,11,18,19,20,21,22,29,32,33,34,35,36,37,62,66,68,71,86,],[7,7,38,40,44,44,47,48,49,54,56,57,58,59,60,44,7,82,82,82,7,]),'if_stmt':([0,2,62,86,],[9,9,9,9,]),'funcdef':([0,2,62,86,],[10,10,10,10,]),'tuple':([0,2,7,8,11,18,19,20,21,22,29,32,33,34,35,36,37,38,40,44,47,48,49,54,56,57,58,59,60,62,66,68,71,82,86,],[13,13,30,13,13,13,13,13,13,13,13,13,13,13,13,13,13,30,30,30,30,30,30,30,30,30,30,30,30,13,13,13,13,30,13,]),'csv':([18,19,22,37,],[42,45,51,51,]),'body':([40,63,],[61,77,]),'fargs':([41,],[63,]),'stmts':([62,],[74,]),'csa':([64,],[78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file_input_end","S'",1,None,None,None),
  ('stmt -> IMPORT IMPNAME','stmt',2,'p_statement_hio_import','lexer.py',199),
  ('stmt -> IMPORT IMPNAME AS VAR','stmt',4,'p_statement_hio_import','lexer.py',200),
  ('stmt -> IMPORT VAR','stmt',2,'p_statement_import','lexer.py',212),
  ('stmt -> IMPORT VAR AS VAR','stmt',4,'p_statement_import','lexer.py',213),
  ('stmt -> VAR EQUALS expression','stmt',3,'p_statement_assign','lexer.py',222),
  ('csa -> VAR','csa',1,'p_expression_csa','lexer.py',228),
  ('csa -> csa COMMA VAR','csa',3,'p_expression_csa','lexer.py',229),
  ('fargs -> LPAREN csa RPAREN','fargs',3,'p_statement_func_args','lexer.py',238),
  ('fargs -> LPAREN csa COMMA RPAREN','fargs',4,'p_statement_func_args','lexer.py',239),
  ('fargs -> LPAREN RPAREN','fargs',2,'p_statement_func_args','lexer.py',240),
  ('stmts -> stmt','stmts',1,'p_stmts','lexer.py',249),
  ('stmts -> stmts NEWLINE stmt','stmts',3,'p_stmts','lexer.py',250),
  ('stmts -> stmts NEWLINE','stmts',2,'p_stmts','lexer.py',251),
  ('stmt -> RETURN expression','stmt',2,'p_return_stmt','lexer.py',262),
  ('stmt -> if_stmt','stmt',1,'p_compound_stmt','lexer.py',267),
  ('stmt -> funcdef','stmt',1,'p_compound_stmt','lexer.py',268),
  ('stmt -> expression','stmt',1,'p_expr_stmt','lexer.py',273),
  ('if_stmt -> IF expression body','if_stmt',3,'p_if_stmt','lexer.py',278),
  ('body -> LBRACE stmts RBRACE','body',3,'p_body_stmts','lexer.py',283),
  ('body -> LBRACE RBRACE','body',2,'p_body_empty','lexer.py',297),
  ('csv -> expression','csv',1,'p_expression_csv','lexer.py',302),
  ('csv -> csv COMMA expression','csv',3,'p_expression_csv','lexer.py',303),
  ('tuple -> LPAREN csv RPAREN','tuple',3,'p_tuple','lexer.py',312),
  ('tuple -> LPAREN csv COMMA RPAREN','tuple',4,'p_tuple','lexer.py',313),
  ('tuple -> LPAREN RPAREN','tuple',2,'p_tuple','lexer.py',314),
  ('expression -> expression tuple','expression',2,'p_call_expr','lexer.py',323),
  ('funcdef -> FXN VAR fargs body','funcdef',4,'p_funcdef','lexer.py',332),
  ('expression -> expression DOT VAR','expression',3,'p_getattr_expr','lexer.py',342),
  ('expression -> STRING','expression',1,'p_expression_literals','lexer.py',347),
  ('expression -> INT','expression',1,'p_expression_literals','lexer.py',348),
  ('expression -> FLOAT','expression',1,'p_expression_literals','lexer.py',349),
  ('expression -> COMPLEX','expression',1,'p_expression_literals','lexer.py',350),
  ('expression -> VAR','expression',1,'p_expression_var','lexer.py',356),
  ('expression -> tuple','expression',1,'p_tuple_litr','lexer.py',361),
  ('expression -> LBRACE csv RBRACE','expression',3,'p_expression_set','lexer.py',366),
  ('expression -> LBRACE csv COMMA RBRACE','expression',4,'p_expression_set','lexer.py',367),
  ('expression -> LBRACE RBRACE','expression',2,'p_expression_set','lexer.py',368),
  ('expression -> LBRACKET csv RBRACKET','expression',3,'p_expression_list','lexer.py',377),
  ('expression -> LBRACKET csv COMMA RBRACKET','expression',4,'p_expression_list','lexer.py',378),
  ('expression -> LBRACKET RBRACKET','expression',2,'p_expression_list','lexer.py',379),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','lexer.py',388),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','lexer.py',389),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','lexer.py',390),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','lexer.py',391),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','lexer.py',392),
  ('expression -> MINUS expression','expression',2,'p_expression_unop','lexer.py',397),
  ('expression -> INVERT expression','expression',2,'p_expression_unop','lexer.py',398),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','lexer.py',403),
  ('expression -> TRUE','expression',1,'p_expression_bool','lexer.py',408),
  ('expression -> FALSE','expression',1,'p_expression_fbool','lexer.py',413),
  ('file_input_end -> file_input','file_input_end',1,'p_file_input_end','lexer.py',418),
  ('file_input -> file_input NEWLINE','file_input',2,'p_file_input','lexer.py',423),
  ('file_input -> file_input stmt','file_input',2,'p_file_input','lexer.py',424),
  ('file_input -> NEWLINE','file_input',1,'p_file_input','lexer.py',425),
  ('file_input -> stmt','file_input',1,'p_file_input','lexer.py',426),
]
